# -*- coding: utf-8 -*-
"""Tarea 4.2 Regla del Trapecio.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Qcq43mF8LnQCDFRA3QL-usFo6dxauyCV
"""

#Antonio Josue Rodriguez Falcon
#Ejercicio 1

import numpy as np
import matplotlib.pyplot as plt

def f(x):
    return x**2 + 3*x + 1

def trapezoidal_rule(a, b, n):
    x = np.linspace(a, b, n+1)
    y = f(x)
    h = (b - a) / n
    integral = (h / 2) * (y[0] + 2 * sum(y[1:n]) + y[n])
    return integral, x, y

# Parámetros
a, b = 0, 2
n_values = [10, 20, 50]

# Solución exacta
exact = (1/3)*b**3 + (3/2)*b**2 + b - ((1/3)*a**3 + (3/2)*a**2 + a)

# Resultados
print(f"Solución exacta: {exact:.6f}\n")
for n in n_values:
    approx, x_vals, y_vals = trapezoidal_rule(a, b, n)
    error = abs(exact - approx)
    print(f"n = {n}: Aproximación = {approx:.6f}, Error = {error:.6f}")

# Gráfica para n=10
approx, x_vals, y_vals = trapezoidal_rule(a, b, 10)
x_fine = np.linspace(a, b, 100)
y_fine = f(x_fine)

plt.figure(figsize=(8, 5))
plt.plot(x_fine, y_fine, 'r-', label=r'$f(x) = x^2 + 3x + 1$', linewidth=2)
plt.fill_between(x_vals, y_vals, alpha=0.3, color='blue', label="Aproximación Trapecios")
plt.plot(x_vals, y_vals, 'bo-', label="Puntos de integración")
plt.xlabel("x")
plt.ylabel("f(x)")
plt.title("Aproximación de la integral con la regla del trapecio (n=10)")
plt.legend()
plt.grid()
plt.show()

#Ejercicio 2

import numpy as np
import matplotlib.pyplot as plt

def f(x):
    return np.exp(4 - x**2)

def trapezoidal_rule(a, b, n):
    x = np.linspace(a, b, n+1)
    y = f(x)
    h = (b - a) / n
    integral = (h / 2) * (y[0] + 2 * sum(y[1:n]) + y[n])
    return integral, x, y

# Parámetros
a, b = 1, 4
n_values = [5, 10, 15]

# Resultados
print("Convergencia de la aproximación:\n")
for n in n_values:
    approx, x_vals, y_vals = trapezoidal_rule(a, b, n)
    print(f"n = {n}: Aproximación = {approx:.6f}")

# Gráfica para n=10
approx, x_vals, y_vals = trapezoidal_rule(a, b, 10)
x_fine = np.linspace(a, b, 100)
y_fine = f(x_fine)

plt.figure(figsize=(8, 5))
plt.plot(x_fine, y_fine, 'r-', label=r'$f(x) = e^{4-x^2}$', linewidth=2)
plt.fill_between(x_vals, y_vals, alpha=0.3, color='blue', label="Aproximación Trapecios")
plt.plot(x_vals, y_vals, 'bo-', label="Puntos de integración")
plt.xlabel("x")
plt.ylabel("f(x)")
plt.title("Aproximación de la integral con la regla del trapecio (n=10)")
plt.legend()
plt.grid()
plt.show()

#Ejercicio 3

import numpy as np
import matplotlib.pyplot as plt

def f(x):
    return np.sin(x)

def trapezoidal_rule(a, b, n):
    x = np.linspace(a, b, n+1)
    y = f(x)
    h = (b - a) / n
    integral = (h / 2) * (y[0] + 2 * sum(y[1:n]) + y[n])
    return integral, x, y

# Parámetros
a, b = 0, np.pi
n_values = [5, 10, 20, 50]

# Solución exacta
exact = -np.cos(b) - (-np.cos(a))

# Resultados y gráficas
plt.figure(figsize=(10, 6))
for n in n_values:
    approx, x_vals, y_vals = trapezoidal_rule(a, b, n)
    error = abs(exact - approx)
    print(f"n = {n}: Aproximación = {approx:.6f}, Error = {error:.6f}")

    # Graficar cada aproximación
    plt.plot(x_vals, y_vals, 'o-', label=f"n={n}")

# Graficar función exacta
x_fine = np.linspace(a, b, 100)
y_fine = f(x_fine)
plt.plot(x_fine, y_fine, 'k-', label="sin(x)", linewidth=2)

plt.xlabel("x")
plt.ylabel("f(x)")
plt.title("Aproximación de la integral de sin(x) con diferentes n")
plt.legend()
plt.grid()
plt.show()